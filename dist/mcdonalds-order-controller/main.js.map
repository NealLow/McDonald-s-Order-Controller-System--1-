{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.module.ts","./src/app/components/order-controller/order-controller.component.ts","./src/app/components/order-controller/order-controller.component.html","./src/app/services/order.service.ts","./src/main.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    template: `\r\n    <div class=\"app-container\">\r\n      <app-order-controller></app-order-controller>\r\n    </div>\r\n  `,\r\n    styles: [`\r\n    .app-container {\r\n      min-height: 100vh;\r\n      background-color: #f5f5f5;\r\n    }\r\n  `]\r\n})\r\nexport class AppComponent {\r\n    title = 'mcdonalds-order-controller';\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { AppComponent } from './app.component';\r\n\r\n// ng-zorro modules - 只导入必要的模块\r\nimport { NzCardModule } from 'ng-zorro-antd/card';\r\nimport { NzButtonModule } from 'ng-zorro-antd/button';\r\nimport { NzTagModule } from 'ng-zorro-antd/tag';\r\nimport { NzIconModule } from 'ng-zorro-antd/icon';\r\n\r\n// Components\r\nimport { OrderControllerComponent } from './components/order-controller/order-controller.component';\r\n\r\n// Icons - 只导入实际使用的图标\r\nimport {\r\n    PlusOutline,\r\n    MinusOutline,\r\n    CrownOutline,\r\n    RobotOutline,\r\n    ClockCircleOutline,\r\n    CheckCircleOutline,\r\n    HourglassOutline\r\n} from '@ant-design/icons-angular/icons';\r\n\r\nconst icons = [\r\n    PlusOutline,\r\n    MinusOutline,\r\n    CrownOutline,\r\n    RobotOutline,\r\n    ClockCircleOutline,\r\n    CheckCircleOutline,\r\n    HourglassOutline\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        OrderControllerComponent\r\n    ],\r\n    imports: [\r\n        BrowserModule,\r\n        BrowserAnimationsModule,\r\n        // ng-zorro modules - 移除未使用的模块\r\n        NzCardModule,\r\n        NzButtonModule,\r\n        NzTagModule,\r\n        NzIconModule.forRoot(icons)\r\n    ],\r\n    providers: [],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { OrderService } from '../../services/order.service';\r\nimport { Order, Bot } from '../../models/order.model';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'app-order-controller',\r\n    templateUrl: './order-controller.component.html',\r\n    styleUrls: ['./order-controller.component.scss']\r\n})\r\nexport class OrderControllerComponent implements OnInit, OnDestroy {\r\n    orders: Order[] = [];\r\n    bots: Bot[] = [];\r\n\r\n    private destroy$ = new Subject<void>();\r\n\r\n    constructor(private orderService: OrderService) { }\r\n\r\n    ngOnInit(): void {\r\n        // Subscribe to orders\r\n        this.orderService.getOrders()\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(orders => {\r\n                this.orders = orders;\r\n            });\r\n\r\n        // Subscribe to bots\r\n        this.orderService.getBots()\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(bots => {\r\n                this.bots = bots;\r\n            });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    // Getters for filtered orders\r\n    get pendingOrders(): Order[] {\r\n        return this.orders.filter(order => order.status === 'PENDING');\r\n    }\r\n\r\n    get processingOrders(): Order[] {\r\n        return this.orders.filter(order => order.status === 'PROCESSING');\r\n    }\r\n\r\n    get completedOrders(): Order[] {\r\n        return this.orders.filter(order => order.status === 'COMPLETE').reverse();\r\n    }\r\n\r\n    // Order creation methods\r\n    createNormalOrder(): void {\r\n        this.orderService.createNormalOrder();\r\n    }\r\n\r\n    createVipOrder(): void {\r\n        this.orderService.createVipOrder();\r\n    }\r\n\r\n    // Bot management methods\r\n    addBot(): void {\r\n        this.orderService.addBot();\r\n    }\r\n\r\n    removeBot(): void {\r\n        this.orderService.removeBot();\r\n    }\r\n\r\n    // Helper methods for UI\r\n    getBotStatusColor(status: Bot['status']): string {\r\n        switch (status) {\r\n            case 'IDLE': return 'default';\r\n            case 'PROCESSING': return 'blue';\r\n            default: return 'default';\r\n        }\r\n    }\r\n\r\n    getBotStatusText(status: Bot['status']): string {\r\n        switch (status) {\r\n            case 'IDLE': return 'Idle';\r\n            case 'PROCESSING': return 'Working';\r\n            default: return status;\r\n        }\r\n    }\r\n\r\n    getBotIcon(status: Bot['status']): string {\r\n        switch (status) {\r\n            case 'IDLE': return 'check-circle';\r\n            case 'PROCESSING': return 'sync';\r\n            default: return 'robot';\r\n        }\r\n    }\r\n\r\n    getActiveBots(): number {\r\n        return this.bots.filter(bot => bot.status === 'IDLE' || bot.status === 'PROCESSING').length;\r\n    }\r\n\r\n    formatBotId(id: number): string {\r\n        return id.toString().padStart(3, '0');\r\n    }\r\n\r\n    getOrderTypeColor(type: Order['type']): string {\r\n        switch (type) {\r\n            case 'VIP': return 'gold';\r\n            case 'NORMAL': return 'default';\r\n            default: return 'default';\r\n        }\r\n    }\r\n\r\n    // Track by functions for performance\r\n    trackOrderById(index: number, order: Order): number {\r\n        return order.id;\r\n    }\r\n\r\n    trackBotById(index: number, bot: Bot): number {\r\n        return bot.id;\r\n    }\r\n}\r\n","<div class=\"container\">\r\n    <!-- Header -->\r\n    <div class=\"header\">\r\n        <h1>McDonald's Order Controller</h1>\r\n        <p class=\"subtitle\">Automated cooking bot order management system</p>\r\n    </div>\r\n\r\n    <!-- Control Panel -->\r\n    <nz-card nzTitle=\"Control Panel\" class=\"control-panel\">\r\n        <div class=\"controls\">\r\n            <button nz-button nzType=\"default\" (click)=\"createNormalOrder()\" class=\"control-btn\">\r\n                <i nz-icon nzType=\"plus\" nzTheme=\"outline\"></i>\r\n                <span class=\"btn-text\">Normal Order</span>\r\n            </button>\r\n\r\n            <button nz-button nzType=\"default\" (click)=\"createVipOrder()\" class=\"control-btn vip-button\">\r\n                <i nz-icon nzType=\"crown\" nzTheme=\"outline\"></i>\r\n                <span class=\"btn-text\">VIP Order</span>\r\n            </button>\r\n\r\n            <button nz-button nzType=\"primary\" (click)=\"addBot()\" class=\"control-btn\">\r\n                <i nz-icon nzType=\"plus\" nzTheme=\"outline\"></i>\r\n                <span class=\"btn-text\">Add Bot</span>\r\n            </button>\r\n\r\n            <button nz-button nzType=\"default\" nzDanger (click)=\"removeBot()\" [disabled]=\"bots.length === 0\"\r\n                class=\"control-btn\">\r\n                <i nz-icon nzType=\"minus\" nzTheme=\"outline\"></i>\r\n                <span class=\"btn-text\">Remove Bot</span>\r\n            </button>\r\n        </div>\r\n    </nz-card>\r\n\r\n    <!-- Bot Management -->\r\n    <nz-card class=\"bot-management\">\r\n        <div nz-card-head>\r\n            <div class=\"bot-title-section\">\r\n                <div class=\"bot-title-main\">\r\n                    <i nz-icon nzType=\"robot\" nzTheme=\"outline\" class=\"title-icon\"></i>\r\n                    <span class=\"title-text\">Cooking Robots</span>\r\n                </div>\r\n                <div class=\"bot-summary\">\r\n                    <span class=\"summary-item\">\r\n                        <i nz-icon nzType=\"check-circle\" nzTheme=\"outline\"></i>\r\n                        Active: {{getActiveBots()}}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div *ngIf=\"bots.length === 0\" class=\"empty-state\">\r\n            <i nz-icon nzType=\"robot\" nzTheme=\"outline\" class=\"empty-icon\"></i>\r\n            <p>No cooking robots deployed</p>\r\n            <small>Add robots to start processing orders</small>\r\n        </div>\r\n\r\n        <div *ngIf=\"bots.length > 0\" class=\"bots-grid\">\r\n            <div *ngFor=\"let bot of bots; trackBy: trackBotById\" class=\"bot-card\"\r\n                [ngClass]=\"'bot-' + bot.status.toLowerCase()\">\r\n                <div class=\"bot-header\">\r\n                    <div class=\"bot-info\">\r\n                        <span class=\"bot-name\">\r\n                            <i nz-icon [nzType]=\"getBotIcon(bot.status)\" nzTheme=\"outline\"></i>\r\n                            Robot {{bot.id}}\r\n                        </span>\r\n                        <small class=\"bot-id\">#{{formatBotId(bot.id)}}</small>\r\n                    </div>\r\n                    <nz-tag [nzColor]=\"getBotStatusColor(bot.status)\" class=\"bot-status-tag\">\r\n                        {{getBotStatusText(bot.status)}}\r\n                    </nz-tag>\r\n                </div>\r\n\r\n                <div class=\"bot-body\">\r\n                    <div *ngIf=\"bot.currentOrderId\" class=\"bot-current-order\">\r\n                        <i nz-icon nzType=\"clock-circle\" nzTheme=\"outline\"></i>\r\n                        <span>Processing Order #{{bot.currentOrderId}}</span>\r\n                    </div>\r\n\r\n                    <div *ngIf=\"bot.status === 'IDLE'\" class=\"bot-ready\">\r\n                        <i nz-icon nzType=\"check-circle\" nzTheme=\"outline\"></i>\r\n                        <span>Idle - Ready for orders</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </nz-card>\r\n\r\n    <!-- Order Areas -->\r\n    <div class=\"orders-section\">\r\n        <!-- Pending Orders -->\r\n        <nz-card [nzTitle]=\"'PENDING Orders (' + (pendingOrders.length + processingOrders.length) + ')'\"\r\n            class=\"orders-card\">\r\n            <div *ngIf=\"pendingOrders.length === 0 && processingOrders.length === 0\" class=\"empty-state\">\r\n                <i nz-icon nzType=\"hourglass\" nzTheme=\"outline\" class=\"empty-icon\"></i>\r\n                <p>No pending orders</p>\r\n            </div>\r\n\r\n            <div *ngIf=\"pendingOrders.length > 0 || processingOrders.length > 0\" class=\"orders-list\">\r\n                <!-- Processing Orders -->\r\n                <div *ngFor=\"let order of processingOrders; trackBy: trackOrderById\" class=\"order-card processing\">\r\n                    <div class=\"order-content\">\r\n                        <div class=\"order-info\">\r\n                            <div class=\"order-header\">\r\n                                <div class=\"order-id-section\">\r\n                                    <i nz-icon nzType=\"shopping\" nzTheme=\"outline\" class=\"order-icon\"></i>\r\n                                    <span class=\"order-id\">Order #{{order.id}}</span>\r\n                                </div>\r\n                                <div class=\"order-tags\">\r\n                                    <nz-tag [nzColor]=\"getOrderTypeColor(order.type)\" class=\"order-type-tag\">\r\n                                        <i nz-icon [nzType]=\"order.type === 'VIP' ? 'crown' : 'user'\"\r\n                                            nzTheme=\"outline\"></i>\r\n                                        {{order.type}}\r\n                                    </nz-tag>\r\n                                    <nz-tag nzColor=\"processing\" class=\"order-status-tag\">\r\n                                        <i nz-icon nzType=\"loading\" nzTheme=\"outline\" nzSpin></i>\r\n                                        PROCESSING\r\n                                    </nz-tag>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"order-details\">\r\n                                <p class=\"order-time\">\r\n                                    <i nz-icon nzType=\"clock-circle\" nzTheme=\"outline\"></i>\r\n                                    <span>Created: {{order.createdAt | date:'mediumTime'}}</span>\r\n                                </p>\r\n                                <p *ngIf=\"order.processingBotId\" class=\"order-bot\">\r\n                                    <i nz-icon nzType=\"robot\" nzTheme=\"outline\"></i>\r\n                                    <span>Assigned to Robot #{{order.processingBotId}}</span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Pending Orders -->\r\n                <div *ngFor=\"let order of pendingOrders; trackBy: trackOrderById\" class=\"order-card pending\">\r\n                    <div class=\"order-content\">\r\n                        <div class=\"order-info\">\r\n                            <div class=\"order-header\">\r\n                                <div class=\"order-id-section\">\r\n                                    <i nz-icon nzType=\"shopping\" nzTheme=\"outline\" class=\"order-icon\"></i>\r\n                                    <span class=\"order-id\">Order #{{order.id}}</span>\r\n                                </div>\r\n                                <div class=\"order-tags\">\r\n                                    <nz-tag [nzColor]=\"getOrderTypeColor(order.type)\" class=\"order-type-tag\">\r\n                                        <i nz-icon [nzType]=\"order.type === 'VIP' ? 'crown' : 'user'\"\r\n                                            nzTheme=\"outline\"></i>\r\n                                        {{order.type}}\r\n                                    </nz-tag>\r\n                                    <nz-tag nzColor=\"default\" class=\"order-status-tag\">\r\n                                        <i nz-icon nzType=\"hourglass\" nzTheme=\"outline\"></i>\r\n                                        PENDING\r\n                                    </nz-tag>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"order-details\">\r\n                                <p class=\"order-time\">\r\n                                    <i nz-icon nzType=\"clock-circle\" nzTheme=\"outline\"></i>\r\n                                    <span>Created: {{order.createdAt | date:'mediumTime'}}</span>\r\n                                </p>\r\n                                <p class=\"order-waiting\">\r\n                                    <i nz-icon nzType=\"team\" nzTheme=\"outline\"></i>\r\n                                    <span>Waiting for available robot...</span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nz-card>\r\n\r\n        <!-- Completed Orders -->\r\n        <nz-card [nzTitle]=\"'COMPLETE Orders (' + completedOrders.length + ')'\" class=\"orders-card\">\r\n            <div *ngIf=\"completedOrders.length === 0\" class=\"empty-state\">\r\n                <i nz-icon nzType=\"check-circle\" nzTheme=\"outline\" class=\"empty-icon\"></i>\r\n                <p>No completed orders</p>\r\n            </div>\r\n\r\n            <div *ngIf=\"completedOrders.length > 0\" class=\"orders-list\">\r\n                <div *ngFor=\"let order of completedOrders; trackBy: trackOrderById\" class=\"order-card completed\">\r\n                    <div class=\"order-content\">\r\n                        <div class=\"order-info\">\r\n                            <div class=\"order-header\">\r\n                                <div class=\"order-id-section\">\r\n                                    <i nz-icon nzType=\"shopping\" nzTheme=\"outline\" class=\"order-icon\"></i>\r\n                                    <span class=\"order-id\">Order #{{order.id}}</span>\r\n                                </div>\r\n                                <div class=\"order-tags\">\r\n                                    <nz-tag [nzColor]=\"getOrderTypeColor(order.type)\" class=\"order-type-tag\">\r\n                                        <i nz-icon [nzType]=\"order.type === 'VIP' ? 'crown' : 'user'\"\r\n                                            nzTheme=\"outline\"></i>\r\n                                        {{order.type}}\r\n                                    </nz-tag>\r\n                                    <nz-tag nzColor=\"success\" class=\"order-status-tag\">\r\n                                        <i nz-icon nzType=\"check-circle\" nzTheme=\"outline\"></i>\r\n                                        COMPLETE\r\n                                    </nz-tag>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"order-details\">\r\n                                <p class=\"order-time\">\r\n                                    <i nz-icon nzType=\"clock-circle\" nzTheme=\"outline\"></i>\r\n                                    <span>Completed: {{order.createdAt | date:'mediumTime'}}</span>\r\n                                </p>\r\n                                <p class=\"order-success\">\r\n                                    <i nz-icon nzType=\"check\" nzTheme=\"outline\"></i>\r\n                                    <span>Ready for pickup</span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nz-card>\r\n    </div>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Order, Bot } from '../models/order.model';\r\n\r\n/**\r\n * 订单管理服务\r\n * \r\n * 该服务负责管理麦当劳订单系统的核心业务逻辑，包括：\r\n * - 订单的创建、更新和状态管理\r\n * - 烹饪机器人的管理和分配\r\n * - 自动化订单处理流程\r\n * - VIP 订单优先级处理\r\n * \r\n * 使用 RxJS BehaviorSubject 实现响应式数据流，\r\n * 确保 UI 组件能够实时响应数据变化。\r\n */\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n    /** 订单数据流 - 存储所有订单的状态 */\r\n    private orders$ = new BehaviorSubject<Order[]>([]);\r\n\r\n    /** 机器人数据流 - 存储所有机器人的状态 */\r\n    private bots$ = new BehaviorSubject<Bot[]>([]);\r\n\r\n    /** 下一个订单ID计数器 */\r\n    private nextOrderId = 1;\r\n\r\n    /** 下一个机器人ID计数器 */\r\n    private nextBotId = 1;\r\n\r\n    /** 订单处理循环的定时器引用 */\r\n    private processingInterval?: number;\r\n\r\n    /** 存储订单处理的定时器，用于在需要时取消 */\r\n    private orderTimers = new Map<number, any>();\r\n\r\n    constructor() {\r\n        // 启动订单处理循环\r\n        this.startProcessingLoop();\r\n    }\r\n\r\n    /**\r\n     * 获取订单数据流\r\n     * @returns Observable<Order[]> 订单数组的观察者对象\r\n     */\r\n    getOrders(): Observable<Order[]> {\r\n        return this.orders$.asObservable();\r\n    }\r\n\r\n    /**\r\n     * 获取机器人数据流\r\n     * @returns Observable<Bot[]> 机器人数组的观察者对象\r\n     */\r\n    getBots(): Observable<Bot[]> {\r\n        return this.bots$.asObservable();\r\n    }\r\n\r\n    /**\r\n     * 创建普通订单\r\n     * 普通订单会被添加到队列末尾\r\n     */\r\n    createNormalOrder(): void {\r\n        const currentOrders = this.orders$.value;\r\n        const newOrder: Order = {\r\n            id: this.nextOrderId,\r\n            type: 'NORMAL',\r\n            status: 'PENDING',\r\n            createdAt: new Date(),\r\n        };\r\n\r\n        this.orders$.next([...currentOrders, newOrder]);\r\n        this.nextOrderId++;\r\n    }\r\n\r\n    /**\r\n     * 创建 VIP 订单\r\n     * VIP 订单具有优先权，会被插入到现有 VIP 订单之后，普通订单之前\r\n     */\r\n    createVipOrder(): void {\r\n        const currentOrders = this.orders$.value;\r\n        const newOrder: Order = {\r\n            id: this.nextOrderId,\r\n            type: 'VIP',\r\n            status: 'PENDING',\r\n            createdAt: new Date(),\r\n        };\r\n\r\n        const pendingOrders = currentOrders.filter(order => order.status === 'PENDING');\r\n        const nonPendingOrders = currentOrders.filter(order => order.status !== 'PENDING');\r\n\r\n        // 找到插入位置：在现有 VIP 订单之后，普通订单之前\r\n        let insertIndex = 0;\r\n        for (let i = pendingOrders.length - 1; i >= 0; i--) {\r\n            if (pendingOrders[i].type === 'VIP') {\r\n                insertIndex = i + 1;\r\n                break;\r\n            }\r\n        }\r\n\r\n        const updatedPendingOrders = [...pendingOrders];\r\n        updatedPendingOrders.splice(insertIndex, 0, newOrder);\r\n\r\n        this.orders$.next([...updatedPendingOrders, ...nonPendingOrders]);\r\n        this.nextOrderId++;\r\n    }\r\n\r\n    /**\r\n     * 添加新的烹饪机器人\r\n     * 新机器人默认状态为空闲，可以立即接受订单\r\n     */\r\n    addBot(): void {\r\n        const currentBots = this.bots$.value;\r\n        const newBot: Bot = {\r\n            id: this.nextBotId,\r\n            status: 'IDLE',\r\n        };\r\n\r\n        this.bots$.next([...currentBots, newBot]);\r\n        this.nextBotId++;\r\n    }\r\n\r\n    /**\r\n     * 移除最新添加的机器人\r\n     * 如果机器人正在处理订单，该订单会被返回到待处理队列，并取消处理定时器\r\n     */\r\n    removeBot(): void {\r\n        const currentBots = this.bots$.value;\r\n        if (currentBots.length === 0) return;\r\n\r\n        const newestBot = currentBots[currentBots.length - 1];\r\n\r\n        // 如果机器人正在处理订单，将订单返回到待处理状态并取消定时器\r\n        if (newestBot.status === 'PROCESSING' && newestBot.currentOrderId) {\r\n            const orderId = newestBot.currentOrderId;\r\n\r\n            // 取消该订单的处理定时器\r\n            const timerId = this.orderTimers.get(orderId);\r\n            if (timerId) {\r\n                clearTimeout(timerId);\r\n                this.orderTimers.delete(orderId);\r\n            }\r\n\r\n            const currentOrders = this.orders$.value;\r\n            const updatedOrders = currentOrders.map(order =>\r\n                order.id === orderId\r\n                    ? { ...order, status: 'PENDING' as const, processingBotId: undefined }\r\n                    : order\r\n            );\r\n            this.orders$.next(updatedOrders);\r\n        }\r\n\r\n        this.bots$.next(currentBots.slice(0, -1));\r\n    }    /**\r\n     * 获取待处理订单列表\r\n     * @returns Order[] 状态为 PENDING 的订单数组\r\n     */\r\n    getPendingOrders(): Order[] {\r\n        return this.orders$.value.filter(order => order.status === 'PENDING');\r\n    }\r\n\r\n    /**\r\n     * 获取正在处理的订单列表\r\n     * @returns Order[] 状态为 PROCESSING 的订单数组\r\n     */\r\n    getProcessingOrders(): Order[] {\r\n        return this.orders$.value.filter(order => order.status === 'PROCESSING');\r\n    }\r\n\r\n    /**\r\n     * 获取已完成订单列表\r\n     * @returns Order[] 状态为 COMPLETE 的订单数组\r\n     */\r\n    getCompletedOrders(): Order[] {\r\n        return this.orders$.value.filter(order => order.status === 'COMPLETE');\r\n    }\r\n\r\n    /**\r\n     * 启动订单处理循环\r\n     * 每100毫秒检查一次是否有空闲机器人和待处理订单可以匹配\r\n     * @private\r\n     */\r\n    private startProcessingLoop(): void {\r\n        this.processingInterval = window.setInterval(() => {\r\n            this.processOrders();\r\n        }, 100);\r\n    }\r\n\r\n    /**\r\n     * 处理订单分配逻辑\r\n     * 将空闲的机器人分配给待处理的订单，并在10秒后完成订单\r\n     * @private\r\n     */\r\n    private processOrders(): void {\r\n        const currentBots = this.bots$.value;\r\n        const currentOrders = this.orders$.value;\r\n\r\n        const idleBots = currentBots.filter(bot => bot.status === 'IDLE');\r\n        const pendingOrders = currentOrders.filter(order => order.status === 'PENDING');\r\n\r\n        // 为每个空闲机器人分配待处理订单\r\n        idleBots.forEach((bot, index) => {\r\n            if (index < pendingOrders.length) {\r\n                const orderToProcess = pendingOrders[index];\r\n\r\n                // 更新机器人状态为处理中\r\n                const updatedBots = currentBots.map(b =>\r\n                    b.id === bot.id\r\n                        ? {\r\n                            ...b,\r\n                            status: 'PROCESSING' as const,\r\n                            currentOrderId: orderToProcess.id,\r\n                            processingStartTime: new Date()\r\n                        }\r\n                        : b\r\n                );\r\n                this.bots$.next(updatedBots);\r\n\r\n                // 更新订单状态为处理中\r\n                const updatedOrders = currentOrders.map(order =>\r\n                    order.id === orderToProcess.id\r\n                        ? { ...order, status: 'PROCESSING' as const, processingBotId: bot.id }\r\n                        : order\r\n                );\r\n                this.orders$.next(updatedOrders);\r\n\r\n                // 10秒后完成订单处理\r\n                const timerId = setTimeout(() => {\r\n                    // 检查订单是否仍在处理中（可能已被取消）\r\n                    const currentOrdersAtCompletion = this.orders$.value;\r\n                    const currentBotsAtCompletion = this.bots$.value;\r\n\r\n                    const orderStillProcessing = currentOrdersAtCompletion.find(\r\n                        order => order.id === orderToProcess.id && order.status === 'PROCESSING'\r\n                    );\r\n                    const botStillExists = currentBotsAtCompletion.find(b => b.id === bot.id);\r\n\r\n                    // 只有当订单仍在处理中且机器人仍存在时才完成订单\r\n                    if (orderStillProcessing && botStillExists) {\r\n                        // 将机器人状态重置为空闲\r\n                        const finalBots = this.bots$.value.map(b =>\r\n                            b.id === bot.id\r\n                                ? { ...b, status: 'IDLE' as const, currentOrderId: undefined, processingStartTime: undefined }\r\n                                : b\r\n                        );\r\n                        this.bots$.next(finalBots);\r\n\r\n                        // 将订单状态更新为已完成\r\n                        const finalOrders = this.orders$.value.map(order =>\r\n                            order.id === orderToProcess.id\r\n                                ? { ...order, status: 'COMPLETE' as const }\r\n                                : order\r\n                        );\r\n                        this.orders$.next(finalOrders);\r\n                    }\r\n\r\n                    // 清理定时器引用\r\n                    this.orderTimers.delete(orderToProcess.id);\r\n                }, 10000); // 10秒处理时间\r\n\r\n                // 存储定时器引用，以便可以取消\r\n                this.orderTimers.set(orderToProcess.id, timerId);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 清理资源\r\n     * 组件销毁时调用，清除定时器防止内存泄漏\r\n     */\r\n    ngOnDestroy(): void {\r\n        if (this.processingInterval) {\r\n            clearInterval(this.processingInterval);\r\n        }\r\n\r\n        // 清理所有订单处理定时器\r\n        this.orderTimers.forEach(timerId => {\r\n            clearTimeout(timerId);\r\n        });\r\n        this.orderTimers.clear();\r\n    }\r\n}\r\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { AppModule } from './app/app.module';\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n    .catch(err => console.error(err));\r\n"],"names":["AppComponent","constructor","title","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","BrowserModule","BrowserAnimationsModule","NzCardModule","NzButtonModule","NzTagModule","NzIconModule","OrderControllerComponent","PlusOutline","MinusOutline","CrownOutline","RobotOutline","ClockCircleOutline","CheckCircleOutline","HourglassOutline","icons","AppModule","bootstrap","forRoot","declarations","imports","i1","Subject","takeUntil","ɵɵtext","ɵɵadvance","ɵɵtextInterpolate1","bot_r1","currentOrderId","ɵɵtemplate","OrderControllerComponent_div_36_div_1_div_11_Template","OrderControllerComponent_div_36_div_1_div_12_Template","ɵɵproperty","status","toLowerCase","ctx_r1","getBotIcon","id","formatBotId","getBotStatusColor","getBotStatusText","OrderControllerComponent_div_36_div_1_Template","bots","trackBotById","order_r3","processingBotId","OrderControllerComponent_div_40_div_1_p_21_Template","getOrderTypeColor","type","ɵɵpipeBind2","createdAt","order_r4","OrderControllerComponent_div_40_div_1_Template","OrderControllerComponent_div_40_div_2_Template","processingOrders","trackOrderById","pendingOrders","order_r5","OrderControllerComponent_div_43_div_1_Template","completedOrders","orderService","orders","destroy$","ngOnInit","getOrders","pipe","subscribe","getBots","ngOnDestroy","next","complete","filter","order","reverse","createNormalOrder","createVipOrder","addBot","removeBot","getActiveBots","bot","length","toString","padStart","index","ɵɵdirectiveInject","OrderService","OrderControllerComponent_Template","ɵɵlistener","OrderControllerComponent_Template_button_click_8_listener","OrderControllerComponent_Template_button_click_12_listener","OrderControllerComponent_Template_button_click_16_listener","OrderControllerComponent_Template_button_click_20_listener","OrderControllerComponent_div_35_Template","OrderControllerComponent_div_36_Template","OrderControllerComponent_div_39_Template","OrderControllerComponent_div_40_Template","OrderControllerComponent_div_42_Template","OrderControllerComponent_div_43_Template","BehaviorSubject","orders$","bots$","nextOrderId","nextBotId","orderTimers","Map","startProcessingLoop","asObservable","currentOrders","value","newOrder","Date","nonPendingOrders","insertIndex","i","updatedPendingOrders","splice","currentBots","newBot","newestBot","orderId","timerId","get","clearTimeout","delete","updatedOrders","map","undefined","slice","getPendingOrders","getProcessingOrders","getCompletedOrders","processingInterval","window","setInterval","processOrders","idleBots","forEach","orderToProcess","updatedBots","b","processingStartTime","setTimeout","currentOrdersAtCompletion","currentBotsAtCompletion","orderStillProcessing","find","botStillExists","finalBots","finalOrders","set","clearInterval","clear","factory","ɵfac","providedIn","__NgCli_bootstrap_1","platformBrowser","bootstrapModule","catch","err","console","error"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}